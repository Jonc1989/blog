{"version":3,"sources":["app.js","galleries/galleries.js","home/home.js","messages/messages.js","posts/posts.js","users/user.js","galleries/controllers/FriendGalleriesController.js","galleries/controllers/GalleriesController.js","galleries/controllers/GalleryCreateController.js","galleries/controllers/GalleryDetailsController.js","galleries/controllers/MineGalleriesController.js","galleries/services/GalleriesService.js","home/components/info.js","home/components/invitations.js","home/components/online.js","home/components/search.js","home/controllers/InfoController.js","home/controllers/InvitationsController.js","home/controllers/OnlineController.js","home/controllers/SearchController.js","messages/controllers/MessagesController.js","messages/services/MessageService.js","posts/components/like.js","posts/components/post.component.js","posts/controllers/LikeController.js","posts/controllers/PostController.js","posts/services/PostService.js","users/components/friends.js","users/components/invitation.js","users/components/user-info.js","users/controllers/FriendsController.js","users/controllers/InvitationController.js","users/controllers/UserController.js","users/controllers/UserEditController.js","users/services/UserService.js","map.js","socket.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACprJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["var app = angular.module( 'app', [\r\n    'ui.router',\r\n    'ngFileUpload',\r\n    'home',\r\n    'posts',\r\n    'users',\r\n    'messages',\r\n    'galleries',\r\n    'ngDialog'\r\n\r\n] );\r\n\r\n","var galleries = angular.module('galleries', [\r\n\r\n]).config([ '$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {\r\n\r\n\r\n    // $urlRouterProvider.otherwise(function($injector, $location){\r\n    //     console.log('shit happens');\r\n    // });\r\n    //$urlRouterProvider.otherwise(\"/all\");\r\n    $stateProvider\r\n        .state('all', {\r\n            url: \"/all\",\r\n            templateUrl: \"/api/view/modules.galleries.api.all\",\r\n            controller: \"FriendGalleriesController\"\r\n        })\r\n        .state('mine', {\r\n            url: \"/mine\",\r\n            templateUrl: \"/api/view/modules.galleries.api.all\",\r\n            controller: \"MineGalleriesController\"\r\n        })\r\n        .state('create', {\r\n            url: \"/create\",\r\n            templateUrl: \"/api/view/modules.galleries.api.create\",\r\n            controller: \"GalleryCreateController\",\r\n        })\r\n        .state('show', {\r\n            url: \"/show/:id\",\r\n            templateUrl: \"/api/view/modules.galleries.api.details\",\r\n            controller: \"GalleryDetailsController\",\r\n        })\r\n\r\n\r\n}]);\r\n","var home = angular.module('home', [\r\n\r\n]);\r\n","var messages = angular.module('messages', [\r\n\r\n])\r\n    .config(function($stateProvider, $urlRouterProvider) {\r\n\r\n        //$urlRouterProvider.otherwise(\"/\");\r\n\r\n        // $stateProvider\r\n        //     .state('messages', {\r\n        //         url: \"/:id\",\r\n        //         templateUrl: \"/api/view/modules.messages.api.content\",\r\n        //         controller: \"PostController\",\r\n        //         params: {\r\n        //             id: null\r\n        //         }\r\n        //     })\r\n        //     .state('friends', {\r\n        //         url: \"/friends\",\r\n        //         templateUrl: \"/api/view/modules.users.api.friends\",\r\n        //         controller: 'FriendsController',\r\n        //         params: {\r\n        //             id: null\r\n        //         }\r\n        //     });\r\n    });\r\n","var post = angular.module('posts', [\r\n\r\n]);\r\n","var user = angular.module('users', [ ])\r\n    .config([ '$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {\r\n        //\r\n        // For any unmatched url, redirect to /state1\r\n        //$urlRouterProvider.otherwise(\"/posts\");\r\n        //\r\n        // Now set up the states\r\n        $stateProvider\r\n            .state('posts', {\r\n                url: \"/posts\",\r\n                templateUrl: \"/api/view/modules.posts.api.posts\",\r\n                controller: \"PostController\",\r\n                params: {\r\n                    id: null\r\n                }\r\n            })\r\n            .state('friends', {\r\n                url: \"/friends\",\r\n                templateUrl: \"/api/view/modules.users.api.friends\",\r\n                controller: 'FriendsController',\r\n                params: {\r\n                    id: null\r\n                }\r\n            });\r\n    }]);\r\n","galleries.controller('FriendGalleriesController', ['$scope', '$controller', function($scope, $controller ) {\r\n    \r\n    \r\n    this.$onInit = function () {\r\n        $controller('GalleriesController', { $scope: $scope });\r\n        $scope.getGalleries( false );\r\n    };\r\n\r\n}]);\r\n","galleries.controller('GalleriesController', ['$scope', 'GalleriesService', '$state', function($scope,\r\n                                                                        GalleriesService, $state ) {\r\n\r\n    $scope.galleryData = [];\r\n    \r\n    this.$onInit = function () {\r\n        $state.go( 'all' );\r\n    };\r\n    \r\n    $scope.getGalleries = function(auth)\r\n    {\r\n        GalleriesService.all(auth).then(function(response)\r\n        {\r\n            $scope.galleryData = response;\r\n        });\r\n    };\r\n    //\r\n    // $scope.mineGalleries = function( auth )\r\n    // {\r\n    //     GalleriesService.all(auth).then(function(response)\r\n    //     {\r\n    //         $scope.galleryData = response;\r\n    //     });\r\n    // };\r\n\r\n}]);\r\n","galleries.controller('GalleryCreateController', ['$scope', 'GalleriesService', 'Upload', function($scope,\r\n                                                                                              GalleriesService, Upload) {\r\n    $scope.name = '';\r\n    $scope.files = null;\r\n    $scope.uploaded = false;\r\n    $scope.gallerySaved = false;\r\n\r\n    $scope.$watch('files', function () {\r\n        if ($scope.files != '') {\r\n            $scope.previewFiles = $scope.files;\r\n        }\r\n    });\r\n\r\n    $scope.save = function()\r\n    {\r\n        if( $scope.name != '' )\r\n        {\r\n            Upload.upload({\r\n                url: '/api/galleries/',\r\n                data: { files: $scope.files, name: $scope.name }}\r\n            ).success(function (response) {\r\n                $scope.files = null;\r\n                $scope.clearInputs();\r\n            });\r\n\r\n        }\r\n    };\r\n\r\n    $scope.clearInputs = function () {\r\n        $scope.name = '';\r\n    };\r\n\r\n\r\n    $scope.deleteImage = function(id)\r\n    {\r\n        GalleriesService.delete(id).then(function(response)\r\n        {\r\n            if( response.errors == undefined )\r\n            {\r\n                for( var i = 0; i < $scope.files.length; i++)\r\n                {\r\n                    if( $scope.files[i].id == id)\r\n                    {\r\n                        $scope.files.splice( i, 1 );\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    \r\n\r\n}]);\r\n","galleries.controller('GalleryDetailsController', ['$scope', 'GalleriesService', '$stateParams',\r\n    function($scope, GalleriesService, $stateParams) {\r\n        \r\n        $scope.id = $stateParams.id;\r\n        $scope.gallery = {};\r\n\r\n        this.$onInit = function()\r\n        {\r\n            GalleriesService.gallery($scope.id).then(function(response)\r\n            {\r\n                $scope.gallery = response;\r\n            });\r\n        };\r\n\r\n\r\n    }]);\r\n","galleries.controller('MineGalleriesController', ['$scope', '$controller', function($scope, $controller ) {\r\n\r\n    this.$onInit = function () {\r\n        $controller('GalleriesController', { $scope: $scope });\r\n        $scope.getGalleries( true );\r\n    };\r\n\r\n\r\n}]);\r\n","galleries.service( 'GalleriesService', ['$http', '$q', 'Upload', function( $http, $q, Upload )\r\n    {\r\n\r\n        var GalleriesService = {\r\n\r\n            upload: function (files, id)\r\n            {\r\n                if (files && files.length)\r\n                {\r\n                    var deferred = $q.defer();\r\n\r\n                    for (var i = 0; i < files.length; i++)\r\n                    {\r\n\r\n                        var file = files[i];\r\n                        Upload.upload({\r\n                            url: '/api/save-gallery-images',\r\n                            data: id,\r\n                            file: file\r\n                        }).progress(function (evt) {\r\n\r\n                        }).success(function (response) {\r\n                            //console.log(response);\r\n                            deferred.resolve( response );\r\n                        }).error(function (response, status)\r\n                        {\r\n                            if (status === 422)\r\n                            {\r\n                                deferred.resolve({errors: response});\r\n                            } else\r\n                            {\r\n                                deferred.reject();\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                    return deferred.promise;\r\n                }\r\n            },\r\n            save: function( name )\r\n            {\r\n                var deferred = $q.defer();\r\n                var data = {\r\n                    name: name\r\n                };\r\n                $http.post( '/api/galleries/', data )\r\n                    .success( function( response )\r\n                    {console.log();\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function( response, status )\r\n                    {\r\n                        if (status === 422)\r\n                        {\r\n                            deferred.resolve({errors: response});\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            all: function( auth )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/galleries/', { params: { auth: auth } } )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function( response, status )\r\n                    {\r\n                        if (status === 422)\r\n                        {\r\n                            deferred.resolve({errors: response});\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            // mine: function(id)\r\n            // {\r\n            //     var deferred = $q.defer();\r\n            //     $http.get( '/api/galleries/' + id)\r\n            //         .success( function( response )\r\n            //         {\r\n            //             deferred.resolve( response );\r\n            //         } )\r\n            //         .error( function( response, status )\r\n            //         {\r\n            //             if (status === 422)\r\n            //             {\r\n            //                 deferred.resolve({errors: response});\r\n            //             } else\r\n            //             {\r\n            //                 deferred.reject();\r\n            //             }\r\n            //         } );\r\n            //\r\n            //     return deferred.promise;\r\n            //\r\n            // },\r\n            gallery: function(id)\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/galleries/' + id)\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function( response, status )\r\n                    {\r\n                        if (status === 422)\r\n                        {\r\n                            deferred.resolve({errors: response});\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            delete: function(id)\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.delete( '/api/galleries/' + id)\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function( response, status )\r\n                    {\r\n                        if (status === 422)\r\n                        {\r\n                            deferred.resolve({errors: response});\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n        };\r\n        return GalleriesService;\r\n    }] );","/**\r\n * Created by Janis on 06.08.2016..\r\n */\r\napp.component( 'info', {\r\n    templateUrl: '/api/view/modules.home.api.info',\r\n    controller: 'InfoController',\r\n    bindings: {\r\n        id: '<'\r\n    }\r\n})","home.component( 'invitations', {\r\n    templateUrl: '/api/view/modules.home.api.invitations',\r\n    controller: 'InvitationsController'\r\n})","\r\napp.component( 'online', {\r\n    templateUrl: '/api/view/modules.home.api.online',\r\n    controller: 'OnlineController'\r\n})","app.component( 'search', {\r\n    templateUrl: '/api/view/modules.home.api.search',\r\n    controller: 'SearchController'\r\n})","user.controller( 'InfoController', [ 'UserService', '$scope', function ( UserService, $scope ) {\r\n    $scope.user = null;\r\n\r\n    // $scope.init = function (id) {\r\n    //     this.id = id;\r\n    //    \r\n    // };\r\n\r\n    this.$onInit = function () {\r\n        var details = [ 'id', 'name', 'surname', 'photo' ];\r\n        UserService.getUser( this.id, details ).then( function( response )\r\n        {\r\n            $scope.user = response;\r\n        });\r\n    };\r\n    \r\n}]);","home.controller( 'InvitationsController', [ 'UserService', '$scope', function ( UserService, $scope ) {\r\n\r\n    $scope.invitations = [];\r\n    this.$onInit = function () {\r\n        $scope.getInvitations();\r\n    };\r\n    \r\n    $scope.getInvitations = function () {\r\n        UserService.invitations().then( function( response )  {\r\n            $scope.invitations = response;\r\n        });\r\n    };\r\n    \r\n    $scope.accept = function ( id ) {\r\n        UserService.changeStatus( id, 3 ).then( function( response )  {\r\n            \r\n            $scope.$broadcast('invitation-accepted');\r\n        });\r\n    };\r\n\r\n    $scope.$on('invitation-accepted', function(event, args) {\r\n        $scope.getInvitations();\r\n    });\r\n}]);","home.controller( 'OnlineController', [ 'UserService', '$scope', function ( UserService, $scope ) {\r\n    $scope.users = [];\r\n    \r\n    this.$onInit = function () {\r\n        var details = ['name', 'surname', 'photo'];\r\n        UserService.onlineUsers( details ).then( function( response )\r\n        {\r\n            $scope.users = response;\r\n        });\r\n    };\r\n\r\n}]);","user.controller( 'SearchController', [ 'UserService', '$scope', function ( UserService, $scope ) {\r\n\r\n    $scope.searchKey = '';\r\n    $scope.searchResults = [];\r\n    \r\n    $scope.search = function()\r\n    {\r\n        if( $scope.searchKey.length > 2)\r\n        {\r\n            UserService.search($scope.searchKey).then( function( response )\r\n            {\r\n                console.log(response);\r\n                $scope.searchResults = response;\r\n            });\r\n        }else if( $scope.searchKey.length < 1 ){\r\n            $scope.searchResults = [];\r\n        }\r\n    };\r\n    \r\n    $scope.showUser = function(id)\r\n    {\r\n        window.location.href = '/user/' + id;\r\n    };\r\n\r\n    $scope.hideSearchResults = function () {\r\n        setTimeout( function () {\r\n            $('#search-results').hide();\r\n        }, 100 );\r\n    }\r\n\r\n    $scope.showSearchResults = function () {\r\n        $('#search-results').show();\r\n    }\r\n}]);","messages.controller('MessagesController', ['$scope', 'MessageService', function ( $scope, MessageService ) {\r\n\r\n    $scope.friendId = null;\r\n    $scope.messages = {};\r\n    $scope.users = {};\r\n    $scope.disabled = true;\r\n    $scope.message = {\r\n        messageText: \"\",\r\n        receiver: \"\"\r\n    };\r\n\r\n    this.$onInit = function () {\r\n        $scope.messangers();\r\n    };\r\n\r\n    $scope.messangers = function()\r\n    {\r\n        MessageService.getMessengers().then( function( response )\r\n        {\r\n            $scope.users = response.data;\r\n\r\n            if( $scope.users.length ){\r\n                $scope.friendId = $scope.users[0].id;\r\n                $scope.getMessagesFromUser( $scope.friendId );\r\n            }\r\n\r\n        });\r\n    };\r\n\r\n    $scope.getMessagesFromUser = function( id )\r\n    {\r\n        $scope.friendId = id;\r\n        MessageService.getMessages( id ).then( function( response )\r\n        {\r\n            $scope.messages = response;\r\n\r\n            console.log( $scope.messages );\r\n        });\r\n    };\r\n\r\n    $scope.sendMessage = function()\r\n    {\r\n        $scope.message.messageText = $scope.messageBody;\r\n        $scope.message.receiver = $scope.friendId;\r\n\r\n        MessageService.send($scope.message).then(function(response){\r\n            $scope.messageBody = \"\";\r\n            $scope.getMessagesFromUser( $scope.friendId );\r\n        });\r\n    };\r\n\r\n    $scope.checkMessageBody = function () {\r\n        $scope.messageBody != '' ? $scope.disabled = false : $scope.disabled = true;\r\n    };\r\n    \r\n}]);","messages.service( 'MessageService', ['$http', '$q', function( $http, $q )\r\n    {\r\n        var MessageService = {\r\n\r\n            send: function(message)\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.post( '/api/messages', message )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response.data );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        if ( status == 422 )\r\n                        {\r\n                            deferred.resolve( { errors: response } );\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n            },\r\n            getMessengers:  function()\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/messengers' )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            getMessages: function( id )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/messages/' + id )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        if ( status == 422 )\r\n                        {\r\n                            deferred.resolve( { errors: response } );\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n            },\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            loadMore: function( id, currentPage )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/messages/' + id, { params: { currentPage: currentPage } } )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        if ( status == 422 )\r\n                        {\r\n                            deferred.resolve( { errors: response } );\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n            }\r\n        };\r\n        return MessageService;\r\n    }] );","post.component( 'like', {\r\n    templateUrl: '/api/view/modules.posts.api.like',\r\n    controller: 'LikeController',\r\n    bindings: {\r\n        likes: '@',\r\n        authId: '<',\r\n        postId: '@'\r\n    }\r\n})","post.component( 'posts', {\r\n    templateUrl: '/api/view/modules.posts.api.posts',\r\n    controller: 'PostController',\r\n    bindings: {\r\n        authId: '<'\r\n    }\r\n})","post.controller( 'LikeController', ['$scope', 'PostService', function ( $scope, PostService ) {\r\n        \r\n    $scope.likeStatus = false;\r\n    $scope.likes = [];\r\n    $scope.authId = null;\r\n    $scope.postId = null;\r\n    this.$onInit = function () {\r\n        $scope.likes = JSON.parse( this.likes );\r\n        $scope.authId = this.authId;\r\n        $scope.postId = this.postId;\r\n        $scope.checkLikeStatus();\r\n    };\r\n\r\n    $scope.checkLikeStatus = function () {\r\n        $scope.likes.forEach(function ( like ) {\r\n            if( like.user.id == $scope.authId ){\r\n                $scope.likeStatus = true;\r\n            }\r\n        })\r\n\r\n    };\r\n\r\n    $scope.like = function () {\r\n        PostService.like( $scope.authId, $scope.postId, $scope.likeStatus ).then(function ( response ) {\r\n            console.log( response );\r\n        });\r\n    };    \r\n        \r\n        \r\n        \r\n        \r\n        \r\n    }]);","post.controller( 'PostController', [ 'PostService', '$scope', 'Upload', '$stateParams', '$rootScope', 'SocketFactory',\r\n    function ( PostService, $scope, Upload, $stateParams, $rootScope, SocketFactory ) {\r\n\r\n    $scope.postContent = null;\r\n    $scope.id = null;\r\n    $scope.posts = [];\r\n    $scope.post = {\r\n        content: '',\r\n        location: '',\r\n        latitude: '',\r\n        longitude: ''\r\n    };\r\n    $scope.details = {};\r\n    $scope.searchBox = null;\r\n    \r\n    $scope.current_page = 1;\r\n    $scope.total = 0;\r\n    $scope.last_page = undefined;\r\n    $scope.next_page = 1;\r\n    $scope.per_page = 5;\r\n    $scope.loading = false;\r\n\r\n\r\n\r\n    this.$onInit = function () {\r\n\r\n        if( this.authId !== undefined ){\r\n            $scope.authId = this.authId;\r\n            $scope.userId = undefined;\r\n            $scope.id = this.authId;\r\n        }else{\r\n            $scope.authId = $rootScope.authId;\r\n            $scope.userId = $rootScope.userId;\r\n            $scope.id = $scope.userId\r\n        }\r\n\r\n        //$stateParams.id != null ? $scope.id = $stateParams.id : $scope.id = $rootScope.authId;\r\n        var input = document.getElementById('search-box');\r\n        $scope.searchBox = new google.maps.places.SearchBox(input);\r\n        $scope.getPosts();\r\n\r\n        $scope.searchBox.addListener('places_changed', $scope.setLocation);\r\n        SocketFactory.on('post-added', function (data) {\r\n            $scope.getPosts( true );\r\n        });\r\n        $scope.$on('$destroy', function (event) {\r\n            SocketFactory.removeAllListeners();\r\n        });\r\n    };\r\n\r\n    $scope.setLocation = function () {\r\n        var places =  $scope.searchBox.getPlaces();\r\n        $scope.post.location = places[0].formatted_address;\r\n        $scope.post.latitude = places[0].geometry.location.lat();\r\n        $scope.post.longitude = places[0].geometry.location.lng();\r\n    };\r\n    \r\n    $(window).scroll(function() {\r\n        if($(window).scrollTop() == $(document).height() - $(window).height() && $scope.loading == false ){\r\n            if($scope.current_page != $scope.last_page){\r\n                $scope.getPosts();\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    $scope.getPosts = function ( update ) {\r\n        $scope.loading = true;\r\n\r\n        PostService.getPosts( update == true ? $scope.total + 1 : $scope.per_page, update == true ? $scope.next_page - 1 : $scope.next_page, $scope.authId, $scope.userId  )\r\n            .then(function ( response ) {\r\n            if( response.current_page <= response.last_page ){\r\n\r\n                if( update ){\r\n                    $scope.posts = response.data\r\n                }else{\r\n                    response.data.forEach(function (post) {\r\n                        $scope.posts.push( post );\r\n                    });\r\n                }\r\n\r\n                $scope.next_page = response.current_page + 1;\r\n                $scope.per_page = response.per_page;\r\n                $scope.current_page = response.current_page;\r\n                $scope.last_page = response.last_page;\r\n                $scope.total = response.total;\r\n            }\r\n            $scope.loading = false;\r\n        });\r\n    };\r\n\r\n    $scope.savePost = function() {\r\n        if( $scope.postContent != null )\r\n        {\r\n\r\n            PostService.save($scope.postContent, $scope.post.location, $scope.post.latitude, $scope.post.longitude, $scope.authId, $scope.userId  )\r\n                .then( function( response )\r\n            {\r\n                if( $scope.files != undefined )\r\n                {\r\n                    var id = response;\r\n                    Upload.upload({\r\n                        url: '/api/posts/save-file',\r\n                        data: { files: $scope.files, id: id }}\r\n                    )\r\n                        .success(function (response) {\r\n                            $scope.files = null;\r\n                            $scope.clearInputs();\r\n                        });\r\n                }else{\r\n                    $scope.clearInputs()\r\n                }\r\n\r\n\r\n\r\n            });\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    $scope.addLocation = function () {\r\n        $('#search-box').show();\r\n    };\r\n\r\n\r\n        \r\n\r\n\r\n    $scope.$on('refresh', function(event, args) {\r\n\r\n    });\r\n\r\n    $scope.clearInputs = function () {\r\n        $scope.postContent = null;\r\n        $scope.post.location = '';\r\n        $scope.post.latitude = '';\r\n        $scope.post.longitude = '';\r\n        $('#search-box').val('');\r\n        //SocketFactory.emit('post-added');\r\n        $scope.$broadcast('refresh');\r\n    };\r\n\r\n\r\n}]);","post.service( 'PostService', ['$http', '$q', function( $http, $q )\r\n    {\r\n        var PostService = {\r\n\r\n            save:  function(post, location, lat, lng, authId, userId )\r\n            {\r\n                if( post != '' ){\r\n                    var data = {\r\n                        post: post,\r\n                        location: location,\r\n                        latitude: lat,\r\n                        longitude: lng,\r\n                        authId: authId,\r\n                        userId: userId\r\n                    };\r\n                    var deferred = $q.defer();\r\n                    $http.post( '/api/posts', data )\r\n                        .success( function( response )\r\n                        {\r\n                            deferred.resolve( response );\r\n                        } )\r\n                        .error( function()\r\n                        {\r\n                            deferred.reject();\r\n                        } );\r\n\r\n                    return deferred.promise;\r\n                }\r\n            },\r\n\r\n            getPosts:  function( perPage, current, authid, userId )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/posts', { params: {per_page: perPage, current: current, authid: authid, userId: userId }})\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            like: function( authId, postId, status )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.post( '/api/posts/like', { params: { authId: authId, postId: postId, status: status }})\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            }\r\n        };\r\n        return PostService;\r\n    }] );","user.component( 'friends', {\r\n    templateUrl: '/api/view/modules.users.api.friends',\r\n    controller: 'FriendsController',\r\n    bindings: {\r\n        id: '<',\r\n    }\r\n})","user.component( 'invitation', {\r\n    templateUrl: '/api/view/modules.users.api.invitation',\r\n    controller: 'InvitationController',\r\n    bindings: {\r\n        friendid: '<',\r\n        myid: '<'\r\n    }\r\n})","/**\r\n * Created by Admin on 16.08.2016..\r\n */\r\napp.component( 'userInfo', {\r\n    templateUrl: '/api/view/modules.users.api.user-info',\r\n    controller: 'UserController',\r\n    // $routeConfig: [\r\n    //     { path: \"/\", component: \"posts\", name: \"posts\", useAsDefault: true }\r\n    // ],\r\n    bindings: {\r\n        id: '<'\r\n    }\r\n})","user.controller( 'FriendsController', [ 'UserService', '$scope', '$stateParams', '$rootScope',\r\n    function ( UserService, $scope, $stateParams, $rootScope ) {\r\n    $scope.users = [];\r\n\r\n    $scope.id = null;\r\n\r\n    this.$onInit = function () {\r\n        $stateParams.id != null ? $scope.id = $stateParams.id : $scope.id = $rootScope.userId;\r\n        UserService.getFriends( $scope.id ).then( function( response )\r\n        {\r\n            console.log(response);\r\n            $scope.users = response;\r\n        });\r\n    };\r\n\r\n}]);","user.controller( 'InvitationController', [ 'UserService', '$scope', function ( UserService, $scope ) {\r\n\r\n    $scope.myId = null;\r\n    $scope.friendId = null;\r\n    $scope.friendStatus = null;\r\n    $scope.friendStatusText = null;\r\n    $scope.cancelText = null;\r\n\r\n\r\n    this.$onInit = function () {\r\n        $scope.friendId = this.friendid;\r\n        $scope.myId = this.myid;\r\n        $scope.checkStatus();\r\n    };\r\n\r\n    $scope.checkStatus = function () {\r\n        UserService.getStatus($scope.friendId).then( function ( response ) {\r\n            if(response.length == 0) {\r\n                $scope.friendStatus = 0; //nav draugi                       //action - uzaicināt\r\n                $scope.friendStatusText = 'Uzaicināt';\r\n            }else if( response[0].user_id == $scope.myId ){\r\n                if( response[0].friendship == 0 ){\r\n                    $scope.friendStatus = 1; //uzaicinājums nosūtīts        //action - atcelt uzaicinājumu\r\n                    $scope.friendStatusText = 'Atcelt uzaicinājumu';\r\n                }else{\r\n                    $scope.friendStatus = 2; //uzaicinājums apstiprināts    //action - atcelt draudzību\r\n                    $scope.friendStatusText = 'Atcelt draudzību';\r\n                }\r\n            }else /*if( response[0].friend_id == $scope.friendId )*/{\r\n                if( response[0].friendship == 0 ){\r\n                    $scope.friendStatus = 3; //uzaicinājums saņemts         //action - apstiprināt uzaicinājumu\r\n                    $scope.cancelText = 'Atcelt uzaicinājumu';\r\n                    $scope.friendStatusText = 'Apstiprināt uzaicinājumu';\r\n                }else{\r\n                    $scope.friendStatus = 4; //uzaicinājumu apstiprināju    //action - atcelt draudzību\r\n                    $scope.friendStatusText = 'Atcelt draudzību';\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.changeFriendshipStatus = function () {\r\n        UserService.changeStatus( $scope.friendId, $scope.friendStatus ).then( function( response )  {\r\n            $scope.$broadcast('friend-status-changed');\r\n        });\r\n    };\r\n\r\n    $scope.cancelFriendRequest = function () {\r\n        UserService.changeStatus( $scope.friendId, 1 ).then( function( response )  {\r\n            $scope.$broadcast('friend-status-changed');\r\n        });\r\n    };\r\n\r\n\r\n    $scope.$on('friend-status-changed', function(event, args) {\r\n        $scope.checkStatus();\r\n    });\r\n\r\n}]);","user.controller( 'UserController', [ 'UserService', 'MessageService', '$scope', '$rootScope', '$state', 'ngDialog',\r\n    function ( UserService, MessageService, $scope, $rootScope, $state, ngDialog ) {\r\n\r\n    $scope.user = null;\r\n    $scope.disabled = true;\r\n    $scope.message = {\r\n        messageText: \"\",\r\n        receiver: \"\"\r\n    };\r\n\r\n    $scope.init = function (authId, userId) {\r\n        $rootScope.authId = authId;\r\n        $rootScope.userId = userId;\r\n        $state.go('posts');\r\n        var details = [ 'id', 'name', 'surname', 'photo' ];\r\n        UserService.getUser( userId, details ).then( function( response )\r\n        {\r\n            $scope.user = response;\r\n        });\r\n    };\r\n\r\n    $scope.sendMessage = function()\r\n    {\r\n        $scope.message.messageText = $scope.messageBody;\r\n        $scope.message.receiver = $scope.user.id;\r\n\r\n        MessageService.send($scope.message).then(function(response){\r\n            $scope.messageBody = \"\";\r\n        });\r\n    };\r\n\r\n    $scope.checkMessageBody = function () {\r\n        $scope.messageBody != '' ? $scope.disabled = false : $scope.disabled = true;\r\n    };\r\n\r\n    // $scope.ngMessage = function () {\r\n    //     ngDialog.open({ template: '/api/view/modules.messages.api.dialog', className: 'ngdialog-theme-default' });\r\n    // };\r\n    \r\n}]);","user.controller( 'UserEditController', [ 'UserService', '$scope', function ( UserService, $scope ) {\r\n\r\n    $scope.user = null;\r\n    $scope.disabled = true;\r\n\r\n    $scope.init = function (id) {\r\n\r\n        UserService.getUser( id ).then( function( response )\r\n        {\r\n            $scope.user = response;\r\n        });\r\n    };\r\n\r\n    $scope.saveUser = function ( ) {\r\n        UserService.updateUser( $scope.user.id, $scope.user ).then( function( response )\r\n        {\r\n           console.log(response);\r\n        });\r\n    }\r\n\r\n}]);","user.service( 'UserService', ['$http', '$q', function( $http, $q )\r\n    {\r\n\r\n        var UserService = {\r\n\r\n            getUser:  function( id, details )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/users/' + id,\r\n                    {\r\n                        params: details\r\n                    })\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            updateUser: function ( id, user ) {\r\n                var deferred = $q.defer();\r\n                $http.put( '/api/users/' + id,\r\n                    {\r\n                        params: user\r\n                    })\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n            },\r\n\r\n            onlineUsers:  function( details )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/online',\r\n                    {\r\n                        params: details\r\n                    })\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            getFriends:  function( id )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/friends/' + id )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            changeStatus: function( id, status )\r\n             {\r\n                 var deferred = $q.defer();\r\n                 var data = {\r\n                     id: id,\r\n                     status: status\r\n                 };\r\n                 $http.post( '/api/friends', data )\r\n                     .success( function( response )\r\n                     {\r\n                         deferred.resolve( response );\r\n                     } )\r\n                     .error( function()\r\n                     {\r\n                         deferred.reject();\r\n                     } );\r\n\r\n                 return deferred.promise;\r\n             },\r\n\r\n            getStatus: function( id )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/friend/status/' + id )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            search:  function(string)\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/users/search/' + string )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            invitations: function()\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/friends/invitations' )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            }\r\n        };\r\n        return UserService;\r\n    }] );","app.directive('map', function () {\r\n    return {\r\n        link: function(scope, elem, attrs) {\r\n            var div= $('<div/>', { id: 'map_' + attrs.id });\r\n            $(elem).append( div );\r\n            var map = new google.maps.Map(document.getElementById('map_' + attrs.id), {\r\n                center: {lat: parseFloat(attrs.latitude), lng: parseFloat(attrs.longitude) },\r\n                zoom: 13,\r\n                mapTypeId: 'roadmap'\r\n            });\r\n        }\r\n    }\r\n});","app.factory('SocketFactory', function ($rootScope) {\r\n    var socket = io('http://localhost:3000');\r\n    return {\r\n        on: function (eventName, callback) {\r\n            socket.on(eventName, function () {\r\n                console.log( eventName );\r\n                var args = arguments;\r\n                $rootScope.$apply(function () {\r\n                    callback.apply(socket, args);\r\n                });\r\n            });\r\n        },\r\n        emit: function (eventName, data, callback) {\r\n            socket.emit(eventName, data, function () {\r\n                var args = arguments;\r\n                $rootScope.$apply(function () {\r\n                    if (callback) {\r\n                        callback.apply(socket, args);\r\n                    }\r\n                });\r\n            })\r\n        },\r\n        removeAllListeners: function (eventName, callback) {\r\n            socket.removeAllListeners(eventName, function() {\r\n                var args = arguments;\r\n                $rootScope.$apply(function () {\r\n                    callback.apply(socket, args);\r\n                });\r\n            });\r\n        }\r\n    };\r\n});"],"sourceRoot":"/source/"}