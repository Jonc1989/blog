{"version":3,"sources":["app.js","components/auth.component.js","components/menu.component.js","components/rate.component.js","controllers/AuthController.js","controllers/MenuController.js","controllers/RateController.js","directives/map.js","directives/scrool.js","services/httpIntercepter.js","services/RatingService.js","services/socket.js","services/validationService.js","modules/comments/comments.js","modules/galleries/galleries.js","modules/home/home.js","modules/posts/posts.js","modules/messages/messages.js","modules/users/user.js","modules/comments/components/comment.component.js","modules/comments/controllers/CommentsController.js","modules/comments/services/CommentService.js","modules/galleries/controllers/FriendGalleriesController.js","modules/galleries/controllers/GalleriesController.js","modules/galleries/controllers/GalleryCreateController.js","modules/galleries/controllers/GalleryDetailsController.js","modules/galleries/controllers/MineGalleriesController.js","modules/galleries/services/GalleriesService.js","modules/home/controllers/InfoController.js","modules/home/controllers/InvitationsController.js","modules/home/controllers/OnlineController.js","modules/home/controllers/SearchController.js","modules/home/components/info.js","modules/home/components/invitations.js","modules/home/components/online.js","modules/home/components/search.js","modules/posts/components/like.js","modules/posts/components/post.component.js","modules/posts/controllers/LikeController.js","modules/posts/controllers/PostController.js","modules/posts/services/PostService.js","modules/messages/controllers/MessagesController.js","modules/messages/services/MessageService.js","modules/users/components/friends.js","modules/users/components/invitation.js","modules/users/components/sendMessage.js","modules/users/components/user-info.js","modules/users/controllers/EventController.js","modules/users/controllers/FriendsController.js","modules/users/controllers/InvitationController.js","modules/users/controllers/UserController.js","modules/users/controllers/UserEditController.js","modules/users/controllers/UserMessageSenderController.js","modules/users/controllers/VisitorController.js","modules/users/services/UserService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACllBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACffile":"all.js","sourcesContent":["var app = angular.module( 'app', [\r\n    'ui.router',\r\n    'ngFileUpload',\r\n    'ngSanitize',\r\n    'ngAnimate',\r\n    'home',\r\n    'posts',\r\n    'users',\r\n    'messages',\r\n    'galleries',\r\n    'comments',\r\n    'ngToast'\r\n] )\r\n    .config([ '$httpProvider', function( $httpProvider )\r\n        {\r\n            $httpProvider.interceptors.push('HttpInterceptor');\r\n        }]);","app.component( 'auth', {\r\n    templateUrl: '/api/view/layouts.api.auth',\r\n    controller: 'AuthController',\r\n});","app.component( 'menuComponent', {\r\n    templateUrl: '/api/view/layouts.api.menu',\r\n    controller: 'MenuController',\r\n    bindings: {\r\n        authId: '<'\r\n    }\r\n})","app.component( 'rate', {\r\n    templateUrl: '/api/view/layouts.api.rate',\r\n    controller: 'RateController',\r\n    bindings: {\r\n        rating: \"<\",\r\n        max: \"<\",\r\n        postId: '<',\r\n        setRating: \"&\"\r\n    }\r\n});","app.controller('AuthController', ['$scope', 'ValidationService', function( $scope, ValidationService ) {\r\n\r\n    $scope.EMAIL = ValidationService.email;\r\n    $scope.PASSWORD = ValidationService.password;\r\n    $scope.formData = {};\r\n    $scope.loading = false;\r\n\r\n    this.$onInit = function () {\r\n\r\n    };\r\n    \r\n    \r\n    $scope.blurEmail = function () {\r\n    };\r\n\r\n    $scope.onSubmit = function ($event)\r\n    {\r\n        if( $scope.form.$valid && !$scope.loading )\r\n        {\r\n            $scope.loading = true;            \r\n        }else {\r\n            $event.preventDefault();\r\n        }\r\n    };\r\n}]);\r\n","app.controller('MenuController', ['$scope', '$rootScope', 'SocketFactory', 'MessageService', function( $scope, $rootScope, SocketFactory, MessageService ) {\r\n\r\n    $scope.authId = null;\r\n    $scope.messageCount = null;\r\n    this.$onInit = function () {\r\n        if( this.authId !== undefined ){\r\n            $scope.authId = this.authId;\r\n            $rootScope.authId = this.authId;\r\n            $scope.getMessageCount();\r\n\r\n            SocketFactory.on('message-sent', function (data) {\r\n                if( data.receiver == $scope.authId ){\r\n                    $scope.getMessageCount()\r\n                }\r\n            });\r\n            SocketFactory.on('message-readed', function (data) {\r\n                if( data.receiver == $scope.authId ){\r\n                    $scope.getMessageCount()\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.getMessageCount = function () {\r\n        MessageService.getNewMessages( $scope.authId ).then(function ( response ) {\r\n            $scope.messageCount = response;\r\n        });\r\n    }\r\n}]);\r\n","app.controller('RateController', ['$scope', 'RatingService', '$rootScope', function( $scope, RatingService, $rootScope ) {\r\n\r\n\r\n    $scope.stars = [];\r\n    $scope.rating = {};\r\n    this.$onInit = function () {\r\n\r\n        $scope.rating = {\r\n            id: '',\r\n            rate: this.rating != null ? this.rating.rate : null,\r\n            user_id: $rootScope.authId,\r\n            post_id: this.postId,\r\n            type: this.type\r\n        };\r\n\r\n\r\n        // $scope.authId = $rootScope.authId;\r\n        // $scope.postId = this.postId;\r\n        // $scope.rating = this.rating;\r\n         $scope.max = this.max;\r\n        // $scope.type = this.type;\r\n        $scope.stars = $scope.countStars( $scope.rating.rate, $scope.max );\r\n    };\r\n\r\n     $scope.countStars = function( value, max ) {\r\n        var entries = [];\r\n        for( var i = 1; i <= max; i++ ){\r\n            var icon = i <= value ? \"glyphicon-star\" : \"glyphicon-star-empty\";\r\n            entries.push(icon);\r\n        }\r\n        return entries;\r\n    };\r\n\r\n    $scope.setRating = function( rating ) {\r\n        $scope.rating.rate = rating;\r\n        $scope.stars = $scope.countStars( rating, $scope.max );\r\n        $scope.saveRating();\r\n    };\r\n\r\n    $scope.saveRating = function (){\r\n        // RatingService.rate( $scope.rating ).then(function(){\r\n        //\r\n        // })\r\n    };\r\n\r\n    this.$onChanges = function ( bindings) {\r\n\r\n        if( bindings.postId !== undefined && bindings.postId.currentValue !== $scope.rating.post_id ){\r\n            console.log( bindings );\r\n        }\r\n        if( bindings.rating !== undefined ){\r\n            if( bindings.rating.rate !== undefined && bindings.rating.currentValue.rate !== $scope.rating.rate ){\r\n                $scope.rating = bindings.rating.currentValue;\r\n\r\n                bindings.rating.currentValue !== null ? $scope.setRating( null ) : $scope.setRating( bindings.rating.currentValue.rate )\r\n            }\r\n        }\r\n\r\n\r\n    };\r\n}]);\r\n","app.directive('map', function () {\r\n    return {\r\n        link: function(scope, elem, attrs) {\r\n            var div= $('<div/>', { id: 'map_' + attrs.id });\r\n            $(elem).append( div );\r\n            var map = new google.maps.Map(document.getElementById('map_' + attrs.id), {\r\n                center: {lat: parseFloat(attrs.latitude), lng: parseFloat(attrs.longitude) },\r\n                zoom: 13,\r\n                mapTypeId: 'roadmap'\r\n            });\r\n        }\r\n    }\r\n});","app.directive(\"scroll\", [ 'MessageService', function ( MessageService ) {\r\n    return {\r\n        link: function(scope, element, attrs) {\r\n                setTimeout(function () {\r\n                    if( attrs.authId != scope.message.sender_id ){\r\n                        check();\r\n                        angular.element($('#' + attrs.parent )).bind(\"scroll\", function() {\r\n                            check()\r\n                        });\r\n                        function check() {\r\n                            if( scope.message.readed == 0 ){\r\n                                var diff = $('#' + attrs.parent).offset().top + $('#' + attrs.parent).height();\r\n                                if ( diff > $( '#' + attrs.id).offset().top ) {\r\n\r\n                                    setAsReaded();\r\n\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        function setAsReaded() {\r\n                            setTimeout(function () {\r\n                                scope.message.readed = 1;\r\n                                MessageService.markReaded( scope.message ).then( function ( response ) {\r\n                                    //console.log( response )\r\n                                });\r\n                                if( !scope.$$phase )\r\n                                {\r\n                                    scope.$apply( function () {\r\n                                        scope.message.readed = 1;\r\n                                    });\r\n                                }\r\n                        }, 1000);\r\n                    }\r\n                }\r\n                },300);\r\n        }\r\n    }\r\n\r\n}])","app.factory('HttpInterceptor', function($q) {\r\n    return {\r\n        // optional method\r\n        'request': function(config) {\r\n            // do something on success\r\n            return config;\r\n        },\r\n\r\n        // optional method\r\n        'requestError': function(rejection) {\r\n            // do something on error\r\n            if (canRecover(rejection)) {\r\n                return responseOrNewPromise\r\n            }\r\n            return $q.reject(rejection);\r\n        },\r\n\r\n\r\n\r\n        // optional method\r\n        'response': function(response) {\r\n            return response;\r\n        },\r\n\r\n        // optional method\r\n        'responseError': function(response) {\r\n            var status = response.status;\r\n            if (status == 401) {\r\n                console.log('You are unauthorised!')\r\n                //window.location.replace( \"/\" );\r\n                return;\r\n            }\r\n            return $q.reject(response);\r\n        }\r\n    };\r\n});\r\n","app.service( 'RatingService', ['$http', '$q', function( $http, $q )\r\n{\r\n    var RatingService = {\r\n\r\n        rate: function(rating)\r\n        {\r\n            var deferred = $q.defer();\r\n            $http.post( '/api/common/rate', rating )\r\n                .success( function( response )\r\n                {\r\n                    deferred.resolve( response.data );\r\n                } )\r\n                .error( function()\r\n                {\r\n                    if ( status == 422 )\r\n                    {\r\n                        deferred.resolve( { errors: response } );\r\n                    } else\r\n                    {\r\n                        deferred.reject();\r\n                    }\r\n                } );\r\n\r\n            return deferred.promise;\r\n        }\r\n \r\n    };\r\n    return RatingService;\r\n}] );","app.factory('SocketFactory', function ($rootScope) {\r\n    var socket = io('http://localhost:3000');\r\n    return {\r\n        on: function (eventName, callback) {\r\n            socket.on(eventName, function () {\r\n                console.log( eventName );\r\n                var args = arguments;\r\n                $rootScope.$apply(function () {\r\n                    callback.apply(socket, args);\r\n                });\r\n            });\r\n        },\r\n        emit: function (eventName, data, callback) {\r\n            socket.emit(eventName, data, function () {\r\n                var args = arguments;\r\n                $rootScope.$apply(function () {\r\n                    if (callback) {\r\n                        callback.apply(socket, args);\r\n                    }\r\n                });\r\n            })\r\n        },\r\n        removeAllListeners: function (eventName, callback) {\r\n            socket.removeAllListeners(eventName, function() {\r\n                var args = arguments;\r\n                $rootScope.$apply(function () {\r\n                    callback.apply(socket, args);\r\n                });\r\n            });\r\n        }\r\n    };\r\n});","app.factory( 'ValidationService', [ function()\r\n    {\r\n        var ValidationService = {\r\n            email:              /^(?:[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9_](?:[a-zA-Z0-9_\\-](?!\\.)){0,61}[a-zA-Z0-9_-]?\\.)+[a-zA-Z0-9_](?:[a-zA-Z0-9_\\-](?!$)){0,61}[a-zA-Z0-9_]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/,\r\n            password:           /(?=.*[a-z])(?=.*[A-Z]).{6,}|(?=.*[a-zA-Z])(?=.*[1-9]).{6,}/,\r\n            passwordOrEmpty:    /(^$)|(?=.*[a-z])(?=.*[A-Z]).{6,}|(?=.*[a-zA-Z])(?=.*[1-9]).{6,}/,\r\n            classificatorName:  /^[0-9a-zāčēģīķļņōŗšūžA-ZĀČĒĢĪĶĻŅŌŖŠŪŽ\\s]{3,60}$/,\r\n            globalTextValue:    /^[A-ZĀČĒĢĪĶĻŅŌŖŠŪŽa-zāčēģīķļņōŗšūž0-9 .,!?\\-]{2,}$/,\r\n            number:             /^[0-9]{1,}/,\r\n            fullName:           /^[A-ZĀČĒĢĪĶĻŅŌŖŠŪŽa-zāčēģīķļņōŗšūž]{2,60} [A-ZĀČĒĢĪĶĻŅŌŖŠŪŽa-zāčēģīķļņōŗšūž]{2,60}$/,\r\n            clientName:         /^[A-ZĀČĒĢĪĶĻŅŌŖŠŪŽa-zāčēģīķļņōŗšūž ]{2,60}$/,\r\n            personalCode:       /^[0-9]{6}-[0-9]{5}$/,\r\n            companyName:        /^[A-ZĀČĒĢĪĶĻŅŌŖŠŪŽa-zāčēģīķļņōŗšūž\\s]{3,}$/,\r\n            registrationNumber: /^[A-Z0-9]{5,}$/,\r\n            phone:              /^[0-9]{8}$/,\r\n            clock:              /^(?:0?[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/,\r\n        };\r\n\r\n        return ValidationService;\r\n    }] );","var comments = angular.module('comments', [\r\n\r\n])","var galleries = angular.module('galleries', [\r\n\r\n]).config([ '$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {\r\n\r\n\r\n    // $urlRouterProvider.otherwise(function($injector, $location){\r\n    //     console.log('shit happens');\r\n    // });\r\n    //$urlRouterProvider.otherwise(\"/all\");\r\n    $stateProvider\r\n        .state('all', {\r\n            url: \"/all\",\r\n            templateUrl: \"/api/view/modules.galleries.api.all\",\r\n            controller: \"FriendGalleriesController\"\r\n        })\r\n        .state('mine', {\r\n            url: \"/mine\",\r\n            templateUrl: \"/api/view/modules.galleries.api.all\",\r\n            controller: \"MineGalleriesController\"\r\n        })\r\n        .state('create', {\r\n            url: \"/create\",\r\n            templateUrl: \"/api/view/modules.galleries.api.create\",\r\n            controller: \"GalleryCreateController\",\r\n        })\r\n        .state('show', {\r\n            url: \"/show/:id\",\r\n            templateUrl: \"/api/view/modules.galleries.api.details\",\r\n            controller: \"GalleryDetailsController\",\r\n        })\r\n\r\n\r\n}]);\r\n","var home = angular.module('home', [\r\n\r\n]);\r\n","var post = angular.module('posts', [\r\n\r\n]);\r\n","var messages = angular.module('messages', [\r\n\r\n])\r\n    .config(function($stateProvider, $urlRouterProvider) {\r\n\r\n        //$urlRouterProvider.otherwise(\"/\");\r\n\r\n        // $stateProvider\r\n        //     .state('messages', {\r\n        //         url: \"/:id\",\r\n        //         templateUrl: \"/api/view/modules.messages.api.content\",\r\n        //         controller: \"PostController\",\r\n        //         params: {\r\n        //             id: null\r\n        //         }\r\n        //     })\r\n        //     .state('friends', {\r\n        //         url: \"/friends\",\r\n        //         templateUrl: \"/api/view/modules.users.api.friends\",\r\n        //         controller: 'FriendsController',\r\n        //         params: {\r\n        //             id: null\r\n        //         }\r\n        //     });\r\n    });\r\n","var user = angular.module('users', [ ])\r\n    .config([ '$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {\r\n        //\r\n        // For any unmatched url, redirect to /state1\r\n        //$urlRouterProvider.otherwise(\"/posts\");\r\n        //\r\n        // Now set up the states\r\n        $stateProvider\r\n            .state('posts', {\r\n                url: \"/posts\",\r\n                templateUrl: \"/api/view/modules.posts.api.posts\",\r\n                controller: \"PostController\",\r\n                params: {\r\n                    id: null\r\n                }\r\n            })\r\n            .state('friends', {\r\n                url: \"/friends\",\r\n                templateUrl: \"/api/view/modules.users.api.friends\",\r\n                controller: 'FriendsController',\r\n                params: {\r\n                    id: null\r\n                }\r\n            })\r\n            .state('visitors', {\r\n                url: \"/visitors\",\r\n                templateUrl: \"/api/view/modules.users.api.visitors\",\r\n                controller: \"VisitorController\"\r\n            })\r\n            .state('events', {\r\n                url: \"/events\",\r\n                templateUrl: \"/api/view/modules.users.api.events\",\r\n                controller: \"EventController\"\r\n            });\r\n    }]);\r\n","comments.component( 'comments', {\r\n    templateUrl: '/api/view/modules.comments.api.comments',\r\n    controller: 'CommentsController',\r\n    bindings: {\r\n        postId: '<',\r\n        userId: '<',\r\n        type: '<'\r\n    }\r\n})","comments.controller( 'CommentsController', [ 'UserService', '$scope', 'CommentsService', 'SocketFactory',\r\n    function ( UserService, $scope, CommentsService, SocketFactory ) {\r\n\r\n    $scope.commentBody = '';\r\n    $scope.comments = [];\r\n    this.$onInit = function () {\r\n        $scope.postId = this.postId;\r\n        $scope.userId = this.userId;\r\n        $scope.type = this.type;    \r\n        $scope.commentBody = '';\r\n        $scope.ready = false;\r\n        $scope.getComments();\r\n        SocketFactory.on('comment-created', function (data) {\r\n            if( data.params.postId == $scope.postId && data.params.type == $scope.type ){\r\n                $scope.getComments();\r\n            }\r\n        });\r\n    };\r\n\r\n    this.$onChanges = function ( bindings) {\r\n        if( bindings.postId !== undefined && bindings.postId.currentValue !== $scope.postId ){\r\n            $scope.postId = bindings.postId.currentValue;\r\n        }\r\n        if( bindings.userId !== undefined && bindings.userId.currentValue !== $scope.userId ){\r\n            $scope.userId = bindings.userId.currentValue;\r\n        }\r\n        if( bindings.type !== undefined && bindings.type.currentValue !== $scope.type ){\r\n            $scope.type = bindings.type.currentValue;\r\n        }\r\n        if( $scope.postId !== undefined && $scope.type !== undefined){\r\n            $scope.getComments();\r\n        }\r\n    };\r\n\r\n    $scope.comment = function () {\r\n        $scope.ready = true;\r\n    };\r\n\r\n    $scope.saveComment = function () {\r\n        CommentsService.save( $scope.postId, $scope.userId, $scope.type, $scope.commentBody ).then(function ( response ) {\r\n            $scope.commentBody = '';\r\n        });\r\n    };\r\n    \r\n    $scope.close = function(){\r\n        $scope.ready = false;\r\n    };\r\n\r\n    $scope.getComments = function () {\r\n        CommentsService.all( $scope.postId, $scope.type ).then( function ( response ) {\r\n            $scope.comments = response.data;\r\n        });\r\n    };\r\n}]);","comments.service( 'CommentsService', ['$http', '$q', function( $http, $q )\r\n{\r\n\r\n    var CommentsService = {\r\n\r\n       \r\n        save: function( postId, userId, type, comment )\r\n        {\r\n            var deferred = $q.defer();\r\n            var data = {\r\n                postId: postId, \r\n                userId: userId,\r\n                type: type,\r\n                comment: comment\r\n            };\r\n            $http.post( '/api/comments/', data )\r\n                .success( function( response )\r\n                {console.log();\r\n                    deferred.resolve( response );\r\n                } )\r\n                .error( function( response, status )\r\n                {\r\n                    if (status === 422)\r\n                    {\r\n                        deferred.resolve({errors: response});\r\n                    } else\r\n                    {\r\n                        deferred.reject();\r\n                    }\r\n                } );\r\n\r\n            return deferred.promise;\r\n\r\n        },\r\n\r\n        all: function( postId, type )\r\n        {\r\n            // var params = {\r\n            //     postId: postId,\r\n            //     type: type\r\n            // };\r\n\r\n            var deferred = $q.defer();\r\n            $http.get( '/api/comments/', { params: { postId: postId, type: type } } )\r\n                .success( function( response )\r\n                {\r\n                    deferred.resolve( response );\r\n                } )\r\n                .error( function( response, status )\r\n                {\r\n                    if (status === 422)\r\n                    {\r\n                        deferred.resolve({errors: response});\r\n                    } else\r\n                    {\r\n                        deferred.reject();\r\n                    }\r\n                } );\r\n\r\n            return deferred.promise;\r\n\r\n        }\r\n    };\r\n    return CommentsService;\r\n}] );","galleries.controller('FriendGalleriesController', ['$scope', '$controller', function($scope, $controller ) {\r\n    \r\n    \r\n    this.$onInit = function () {\r\n        $controller('GalleriesController', { $scope: $scope });\r\n        $scope.getGalleries( false );\r\n    };\r\n\r\n}]);\r\n","galleries.controller('GalleriesController', ['$scope', 'GalleriesService', '$state', function($scope,\r\n                                                                        GalleriesService, $state ) {\r\n\r\n    $scope.galleryData = [];\r\n    \r\n    this.$onInit = function () {\r\n        $state.go( 'all' );\r\n    };\r\n    \r\n    $scope.getGalleries = function(auth)\r\n    {\r\n        GalleriesService.all(auth).then(function(response)\r\n        {\r\n            $scope.galleryData = response;\r\n        });\r\n    };\r\n    //\r\n    // $scope.mineGalleries = function( auth )\r\n    // {\r\n    //     GalleriesService.all(auth).then(function(response)\r\n    //     {\r\n    //         $scope.galleryData = response;\r\n    //     });\r\n    // };\r\n\r\n}]);\r\n","galleries.controller('GalleryCreateController', ['$scope', 'GalleriesService', 'Upload', function($scope,\r\n                                                                                              GalleriesService, Upload) {\r\n    $scope.name = '';\r\n    $scope.files = null;\r\n    $scope.uploaded = false;\r\n    $scope.gallerySaved = false;\r\n\r\n    $scope.$watch('files', function () {\r\n        if ($scope.files != '') {\r\n            $scope.previewFiles = $scope.files;\r\n        }\r\n    });\r\n\r\n    $scope.save = function()\r\n    {\r\n        if( $scope.name != '' )\r\n        {\r\n            Upload.upload({\r\n                url: '/api/galleries/',\r\n                data: { files: $scope.files, name: $scope.name }}\r\n            ).success(function (response) {\r\n                $scope.files = null;\r\n                $scope.clearInputs();\r\n            });\r\n\r\n        }\r\n    };\r\n\r\n    $scope.clearInputs = function () {\r\n        $scope.name = '';\r\n    };\r\n\r\n\r\n    $scope.deleteImage = function(image)\r\n    {\r\n  console.log( image );\r\n\r\n        for( var i = 0; i < $scope.files.length; i++)\r\n        {\r\n            if ($scope.files[i].name === image.name ) {\r\n                $scope.files.splice(i, 1);\r\n            }\r\n        }\r\n\r\n    };\r\n    \r\n\r\n}]);\r\n","galleries.controller('GalleryDetailsController', ['$scope', 'GalleriesService', '$stateParams',\r\n    function($scope, GalleriesService, $stateParams) {\r\n        \r\n        $scope.id = $stateParams.id;\r\n        $scope.gallery = {};\r\n        $scope.currentImagePath = '';\r\n        $scope.currentImageIndex = null;\r\n        $scope.currentImageId = null;\r\n        $scope.rating = null;\r\n        this.$onInit = function()\r\n        {\r\n            GalleriesService.gallery($scope.id).then(function(response)\r\n            {\r\n                $scope.gallery = response;\r\n            });\r\n        };\r\n\r\n        $scope.open = function ( image ) {\r\n\r\n            $scope.currentImagePath = image.file_name;\r\n            $.each( $scope.gallery.images, function (i, img) {\r\n                if( img.id == image.id ){\r\n\r\n                    $scope.currentImageIndex = i;\r\n                }\r\n            });\r\n\r\n            $('#imageModal').modal('show')\r\n        };\r\n\r\n        $scope.next = function ()\r\n        {\r\n            if( $scope.currentImageIndex < ($scope.gallery.images.length - 1) )\r\n            {\r\n                $scope.currentImageIndex++;\r\n            }else{\r\n                $scope.currentImageIndex = 0;\r\n            }\r\n\r\n        };\r\n\r\n        $scope.previous = function ()\r\n        {\r\n            if( $scope.currentImageIndex <= ($scope.gallery.images.length - 1) && $scope.currentImageIndex > 0)\r\n            {\r\n                $scope.currentImageIndex--;\r\n            }else{\r\n                $scope.currentImageIndex = ($scope.gallery.images.length - 1);\r\n            }\r\n        };\r\n\r\n\r\n        $scope.$watch( 'currentImageIndex', function( newVal, oldVal )\r\n        {\r\n            if( newVal !== oldVal  )\r\n            {\r\n                $scope.currentImageId = $scope.gallery.images[$scope.currentImageIndex].id;\r\n                $scope.currentImagePath = $scope.gallery.images[$scope.currentImageIndex].file_name;\r\n                $scope.rating = $scope.gallery.images[$scope.currentImageIndex].rating; console.log( $scope.rating );\r\n\r\n            }\r\n\r\n        }, true );\r\n\r\n    }]);\r\n","galleries.controller('MineGalleriesController', ['$scope', '$controller', function($scope, $controller ) {\r\n\r\n    this.$onInit = function () {\r\n        $controller('GalleriesController', { $scope: $scope });\r\n        $scope.getGalleries( true );\r\n    };\r\n\r\n\r\n}]);\r\n","galleries.service( 'GalleriesService', ['$http', '$q', 'Upload', function( $http, $q, Upload )\r\n    {\r\n\r\n        var GalleriesService = {\r\n\r\n            upload: function (files, id)\r\n            {\r\n                if (files && files.length)\r\n                {\r\n                    var deferred = $q.defer();\r\n\r\n                    for (var i = 0; i < files.length; i++)\r\n                    {\r\n\r\n                        var file = files[i];\r\n                        Upload.upload({\r\n                            url: '/api/save-gallery-images',\r\n                            data: id,\r\n                            file: file\r\n                        }).progress(function (evt) {\r\n\r\n                        }).success(function (response) {\r\n                            //console.log(response);\r\n                            deferred.resolve( response );\r\n                        }).error(function (response, status)\r\n                        {\r\n                            if (status === 422)\r\n                            {\r\n                                deferred.resolve({errors: response});\r\n                            } else\r\n                            {\r\n                                deferred.reject();\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                    return deferred.promise;\r\n                }\r\n            },\r\n            save: function( name )\r\n            {\r\n                var deferred = $q.defer();\r\n                var data = {\r\n                    name: name\r\n                };\r\n                $http.post( '/api/galleries/', data )\r\n                    .success( function( response )\r\n                    {console.log();\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function( response, status )\r\n                    {\r\n                        if (status === 422)\r\n                        {\r\n                            deferred.resolve({errors: response});\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            all: function( auth )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/galleries/', { params: { auth: auth } } )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function( response, status )\r\n                    {\r\n                        if (status === 422)\r\n                        {\r\n                            deferred.resolve({errors: response});\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            // mine: function(id)\r\n            // {\r\n            //     var deferred = $q.defer();\r\n            //     $http.get( '/api/galleries/' + id)\r\n            //         .success( function( response )\r\n            //         {\r\n            //             deferred.resolve( response );\r\n            //         } )\r\n            //         .error( function( response, status )\r\n            //         {\r\n            //             if (status === 422)\r\n            //             {\r\n            //                 deferred.resolve({errors: response});\r\n            //             } else\r\n            //             {\r\n            //                 deferred.reject();\r\n            //             }\r\n            //         } );\r\n            //\r\n            //     return deferred.promise;\r\n            //\r\n            // },\r\n            gallery: function(id)\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/galleries/' + id)\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function( response, status )\r\n                    {\r\n                        if (status === 422)\r\n                        {\r\n                            deferred.resolve({errors: response});\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            delete: function(id)\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.delete( '/api/galleries/' + id)\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function( response, status )\r\n                    {\r\n                        if (status === 422)\r\n                        {\r\n                            deferred.resolve({errors: response});\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n        };\r\n        return GalleriesService;\r\n    }] );","user.controller( 'InfoController', [ 'UserService', '$scope', function ( UserService, $scope ) {\r\n    $scope.user = null;\r\n\r\n\r\n    this.$onInit = function () {\r\n        var details = [ 'id', 'name', 'surname', 'photo' ];\r\n        UserService.getUser( this.id, details ).then( function( response )\r\n        {\r\n            $scope.user = response;\r\n        });\r\n        \r\n    };\r\n    \r\n}]);","home.controller( 'InvitationsController', [ 'UserService', '$scope', function ( UserService, $scope ) {\r\n\r\n    $scope.invitations = [];\r\n    this.$onInit = function () {\r\n        $scope.getInvitations();\r\n    };\r\n    \r\n    $scope.getInvitations = function () {\r\n        UserService.invitations().then( function( response )  {\r\n            $scope.invitations = response;\r\n        });\r\n    };\r\n    \r\n    $scope.accept = function ( id ) {\r\n        UserService.changeStatus( id, 3 ).then( function( response )  {\r\n            \r\n            $scope.$broadcast('invitation-accepted');\r\n        });\r\n    };\r\n\r\n    $scope.$on('invitation-accepted', function(event, args) {\r\n        $scope.getInvitations();\r\n    });\r\n}]);","home.controller( 'OnlineController', [ 'UserService', '$scope', 'SocketFactory', 'ngToast', function ( UserService, $scope, SocketFactory, ngToast ) {\r\n    $scope.users = [];\r\n    $scope.details = ['id', 'name', 'surname', 'photo'];\r\n\r\n    $scope.animationColors = [\r\n        'success',\r\n        'info',\r\n        'warning',\r\n        'danger'\r\n    ];\r\n\r\n    this.$onInit = function () {\r\n\r\n        $scope.getUsers();\r\n\r\n        SocketFactory.on('user-online', function (data) {\r\n            $scope.newUser = data.user;\r\n            ngToast.create({\r\n                className: $scope.animationColors[Math.floor(Math.random() * $scope.animationColors.length)].toString(),\r\n                content: '<a href=\"/user/' + $scope.newUser.id + '\" class=\"\">' + $scope.newUser.name + ' ' + $scope.newUser.surname + ' pieslēdzās</a>',\r\n                timeout: 5000,\r\n                verticalPosition: 'bottom'\r\n            });\r\n\r\n            $scope.getUsers();\r\n            //ngToast.dismiss(msg);\r\n            // ngToast.dismiss();\r\n        });\r\n    };\r\n\r\n    $scope.getUsers = function () {\r\n        UserService.onlineUsers( $scope.details ).then( function( response )\r\n        {\r\n            $scope.users = response;\r\n        });\r\n    }\r\n\r\n}]);","user.controller( 'SearchController', [ 'UserService', '$scope', function ( UserService, $scope ) {\r\n\r\n    $scope.searchKey = '';\r\n    $scope.searchResults = [];\r\n    \r\n    $scope.search = function()\r\n    {\r\n        if( $scope.searchKey.length > 2)\r\n        {\r\n            UserService.search($scope.searchKey).then( function( response )\r\n            {\r\n                console.log(response);\r\n                $scope.searchResults = response;\r\n            });\r\n        }else if( $scope.searchKey.length < 1 ){\r\n            $scope.searchResults = [];\r\n        }\r\n    };\r\n    \r\n    $scope.showUser = function(id)\r\n    {\r\n        window.location.href = '/user/' + id;\r\n    };\r\n\r\n    $scope.hideSearchResults = function () {\r\n        setTimeout( function () {\r\n            $('#search-results').hide();\r\n        }, 100 );\r\n    }\r\n\r\n    $scope.showSearchResults = function () {\r\n        $('#search-results').show();\r\n    }\r\n}]);","/**\r\n * Created by Janis on 06.08.2016..\r\n */\r\napp.component( 'info', {\r\n    templateUrl: '/api/view/modules.home.api.info',\r\n    controller: 'InfoController',\r\n    bindings: {\r\n        id: '<'\r\n    }\r\n})","home.component( 'invitations', {\r\n    templateUrl: '/api/view/modules.home.api.invitations',\r\n    controller: 'InvitationsController'\r\n})","\r\napp.component( 'online', {\r\n    templateUrl: '/api/view/modules.home.api.online',\r\n    controller: 'OnlineController'\r\n})","app.component( 'search', {\r\n    templateUrl: '/api/view/modules.home.api.search',\r\n    controller: 'SearchController'\r\n})","post.component( 'like', {\r\n    templateUrl: '/api/view/modules.posts.api.like',\r\n    controller: 'LikeController',\r\n    bindings: {\r\n        likes: '<',\r\n        authId: '<',\r\n        postId: '@',\r\n        type: '<'\r\n    }\r\n})","post.component( 'posts', {\r\n    templateUrl: '/api/view/modules.posts.api.posts',\r\n    controller: 'PostController',\r\n    bindings: {\r\n        authId: '<'\r\n    }\r\n})","post.controller( 'LikeController', ['$scope', 'PostService', 'SocketFactory', function ( $scope, PostService, SocketFactory ) {\r\n        \r\n    $scope.likeStatus = false;\r\n    $scope.likes = [];\r\n    $scope.authId = null;\r\n    $scope.postId = null;\r\n    $scope.type = null;\r\n    this.$onInit = function () {\r\n        $scope.likes = this.likes;\r\n        $scope.authId = this.authId;\r\n        $scope.postId = this.postId;\r\n        $scope.type = this.type;\r\n\r\n        $scope.checkLikeStatus();\r\n        SocketFactory.on('like', function (data) {\r\n            if( data.params.postId == $scope.postId && data.params.type == $scope.type ){\r\n                $scope.getLikes();\r\n            }\r\n        });\r\n    };\r\n\r\n    this.$onChanges = function ( bindings) {\r\n        if( bindings.postId !== undefined && bindings.postId.currentValue !== $scope.postId ){\r\n            $scope.postId = bindings.postId.currentValue;\r\n        }\r\n        if( bindings.authId !== undefined && bindings.authId.currentValue !== $scope.authId ){\r\n            $scope.authId = bindings.authId.currentValue;\r\n        }\r\n        if( bindings.type !== undefined && bindings.type.currentValue !== $scope.type ){\r\n            $scope.type = bindings.type.currentValue;\r\n        }\r\n        if( $scope.postId !== undefined && $scope.type !== undefined){\r\n            $scope.getLikes();\r\n        }\r\n    };\r\n\r\n    $scope.checkLikeStatus = function () {\r\n        $scope.likeStatus = $scope.checkLikes( $scope.likes, $scope.authId );\r\n    };\r\n\r\n    $scope.checkLikes = function(likes, auth) {\r\n        return likes.some(function(like) {\r\n            return auth === like.user_id;\r\n        });\r\n    };\r\n\r\n    $scope.like = function () {\r\n        PostService.like( $scope.authId, $scope.postId, $scope.likeStatus, $scope.type ).then(function ( response ) {\r\n            $scope.getLikes();\r\n        });\r\n    };\r\n\r\n    $scope.getLikes = function () {\r\n        PostService.getLikes( $scope.postId, $scope.type ).then(function ( response ) {\r\n            $scope.likes = response;\r\n            $scope.checkLikeStatus();\r\n        });\r\n    };\r\n        \r\n        \r\n        \r\n    }]);","post.controller( 'PostController', [ 'PostService', '$scope', 'Upload', '$stateParams', '$rootScope', 'SocketFactory',\r\n    function ( PostService, $scope, Upload, $stateParams, $rootScope, SocketFactory ) {\r\n\r\n    $scope.postContent = null;\r\n    $scope.id = null;\r\n    $scope.posts = [];\r\n    $scope.post = {\r\n        content: '',\r\n        location: '',\r\n        latitude: '',\r\n        longitude: ''\r\n    };\r\n    $scope.details = {};\r\n    $scope.searchBox = null;\r\n    \r\n    $scope.current_page = 1;\r\n    $scope.total = 0;\r\n    $scope.last_page = undefined;\r\n    $scope.next_page = 1;\r\n    $scope.per_page = 5;\r\n    $scope.loading = false;\r\n\r\n\r\n\r\n    this.$onInit = function () {\r\n\r\n        if( this.authId !== undefined ){\r\n            $scope.authId = this.authId;\r\n            $scope.userId = undefined;\r\n            $scope.id = this.authId;\r\n        }else{\r\n            $scope.authId = $rootScope.authId;\r\n            $scope.userId = $rootScope.userId;\r\n            $scope.id = $scope.userId\r\n        }\r\n\r\n        //$stateParams.id != null ? $scope.id = $stateParams.id : $scope.id = $rootScope.authId;\r\n        var input = document.getElementById('search-box');\r\n        $scope.searchBox = new google.maps.places.SearchBox(input);\r\n        $scope.getPosts();\r\n\r\n        $scope.searchBox.addListener('places_changed', $scope.setLocation);\r\n        SocketFactory.on('post-added', function (data) {\r\n            $scope.getPosts( true );\r\n        });\r\n        $scope.$on('$destroy', function (event) {\r\n            SocketFactory.removeAllListeners();\r\n        });\r\n    };\r\n\r\n    $scope.setLocation = function () {\r\n        var places =  $scope.searchBox.getPlaces();\r\n        $scope.post.location = places[0].formatted_address;\r\n        $scope.post.latitude = places[0].geometry.location.lat();\r\n        $scope.post.longitude = places[0].geometry.location.lng();\r\n    };\r\n    \r\n    $(window).scroll(function() {\r\n        if($(window).scrollTop() == $(document).height() - $(window).height() && $scope.loading == false ){\r\n            if($scope.current_page != $scope.last_page){\r\n                $scope.getPosts();\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    $scope.getPosts = function ( update ) {\r\n        $scope.loading = true;\r\n\r\n        PostService.getPosts( update == true ? $scope.total + 1 : $scope.per_page, update == true ? $scope.next_page - 1 : $scope.next_page, $scope.authId, $scope.userId  )\r\n            .then(function ( response ) {\r\n            if( response.current_page <= response.last_page ){\r\n\r\n                if( update ){\r\n                    $scope.posts = response.data\r\n                }else{\r\n                    response.data.forEach(function (post) {\r\n                        $scope.posts.push( post );\r\n                    });\r\n                }\r\n\r\n                $scope.next_page = response.current_page + 1;\r\n                $scope.per_page = response.per_page;\r\n                $scope.current_page = response.current_page;\r\n                $scope.last_page = response.last_page;\r\n                $scope.total = response.total;\r\n            }\r\n            $scope.loading = false;\r\n        });\r\n    };\r\n\r\n    $scope.savePost = function() {\r\n        if( $scope.postContent != null )\r\n        {\r\n\r\n            PostService.save($scope.postContent, $scope.post.location, $scope.post.latitude, $scope.post.longitude, $scope.authId, $scope.userId  )\r\n                .then( function( response )\r\n            {\r\n                if( $scope.files != undefined )\r\n                {\r\n                    var id = response;\r\n                    Upload.upload({\r\n                        url: '/api/posts/save-file',\r\n                        data: { files: $scope.files, id: id }}\r\n                    )\r\n                        .success(function (response) {\r\n                            $scope.files = null;\r\n                            $scope.clearInputs();\r\n                        });\r\n                }else{\r\n                    $scope.clearInputs()\r\n                }\r\n\r\n\r\n\r\n            });\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    $scope.addLocation = function () {\r\n        $('#search-box').show();\r\n    };\r\n\r\n\r\n        \r\n\r\n\r\n    $scope.$on('refresh', function(event, args) {\r\n\r\n    });\r\n\r\n    $scope.clearInputs = function () {\r\n        $scope.postContent = null;\r\n        $scope.post.location = '';\r\n        $scope.post.latitude = '';\r\n        $scope.post.longitude = '';\r\n        $('#search-box').val('');\r\n        //SocketFactory.emit('post-added');\r\n        $scope.$broadcast('refresh');\r\n    };\r\n\r\n\r\n}]);","post.service( 'PostService', ['$http', '$q', function( $http, $q )\r\n    {\r\n        var PostService = {\r\n\r\n            save:  function(post, location, lat, lng, authId, userId )\r\n            {\r\n                if( post != '' ){\r\n                    var data = {\r\n                        post: post,\r\n                        location: location,\r\n                        latitude: lat,\r\n                        longitude: lng,\r\n                        authId: authId,\r\n                        userId: userId\r\n                    };\r\n                    var deferred = $q.defer();\r\n                    $http.post( '/api/posts', data )\r\n                        .success( function( response )\r\n                        {\r\n                            deferred.resolve( response );\r\n                        } )\r\n                        .error( function()\r\n                        {\r\n                            deferred.reject();\r\n                        } );\r\n\r\n                    return deferred.promise;\r\n                }\r\n            },\r\n\r\n            getPosts:  function( perPage, current, authid, userId )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/posts', { params: {per_page: perPage, current: current, authid: authid, userId: userId }})\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            like: function( authId, postId, status, type )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.post( '/api/posts/like', { params: { authId: authId, postId: postId, status: status, type: type }})\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            getLikes: function( postId, type )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/posts/likes', { params: { postId: postId, type: type }})\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            }\r\n        };\r\n        return PostService;\r\n    }] );","messages.controller('MessagesController', ['$scope', 'MessageService', 'UserService', 'SocketFactory', '$rootScope', \r\n    function ( $scope, MessageService, UserService, SocketFactory, $rootScope ) {\r\n\r\n    $scope.friendId = null;\r\n    $scope.userSearchOpen = false;\r\n    $scope.messages = [];\r\n    $scope.users = {};\r\n    $scope.disabled = true;\r\n    $scope.message = {\r\n        messageText: \"\",\r\n        receiver: \"\"\r\n    };\r\n    $scope.receivers = [];\r\n    $scope.searchKey = '';\r\n    $scope.searchResults = [];\r\n\r\n    $scope.current_page = 1;\r\n    $scope.total = 0;\r\n    $scope.last_page = undefined;\r\n    $scope.next_page = 1;\r\n    $scope.per_page = 10;\r\n    $scope.loading = false;\r\n\r\n\r\n    this.$onInit = function () {\r\n        $scope.messangers();\r\n        SocketFactory.on('message-sent', function (data) {\r\n            if( data.receiver == $rootScope.authId ){\r\n                //$scope.paginateMessages(     $scope.friendId )\r\n            }\r\n        });\r\n\r\n\r\n    };\r\n\r\n    $scope.messangers = function()\r\n    {\r\n        MessageService.getMessengers().then( function( response )\r\n        {\r\n            $scope.users = response.data;\r\n\r\n            if( $scope.users.length ){\r\n                $scope.friendId = $scope.users[0].id;\r\n                $scope.getMessagesFromUser( $scope.friendId );\r\n            }\r\n\r\n        });\r\n    };\r\n\r\n    $scope.getMessagesFromUser = function( id )\r\n    {\r\n        $scope.loading = true;\r\n        $scope.friendId = id;\r\n        $scope.next_page = 1;\r\n        $scope.per_page = 10;\r\n        MessageService.getMessages( id, $scope.per_page, $scope.next_page ).then( function( response )\r\n        {\r\n            $scope.messages = response.data;\r\n            $scope.next_page = response.current_page + 1;\r\n            $scope.per_page = response.per_page;\r\n            $scope.current_page = response.current_page;\r\n            $scope.last_page = response.last_page;\r\n            $scope.total = response.total;\r\n            $scope.loading = false;\r\n        });\r\n    };\r\n\r\n    $scope.paginateMessages = function( id )\r\n    {\r\n        $scope.loading = true;\r\n        $scope.friendId = id;\r\n        MessageService.getMessages( id, $scope.per_page, $scope.next_page ).then( function( response )\r\n        {\r\n            response.data.forEach(function (message) {\r\n                $scope.messages.push( message );\r\n            });\r\n\r\n            $scope.next_page = response.current_page + 1;\r\n            $scope.per_page = response.per_page;\r\n            $scope.current_page = response.current_page;\r\n            $scope.last_page = response.last_page;\r\n            $scope.total = response.total;\r\n            $scope.loading = false;\r\n        });\r\n    };\r\n    $scope.sendMessage = function()\r\n    {\r\n        $scope.message.messageText = $scope.messageBody;\r\n        $scope.message.receiver = $scope.friendId;\r\n\r\n        MessageService.send( $scope.message ).then(function(response){\r\n            $scope.messageBody = \"\";\r\n            $scope.getMessagesFromUser( $scope.friendId );\r\n            $scope.userSearchOpen = false;\r\n        });\r\n    };\r\n\r\n    $scope.checkMessageBody = function () {\r\n        $scope.messageBody != '' ? $scope.disabled = false : $scope.disabled = true;\r\n    };\r\n    \r\n    $scope.newMessage = function () {\r\n        $scope.userSearchOpen = true;\r\n        $scope.friendId = undefined;\r\n        $scope.messages = {};\r\n    }\r\n\r\n\r\n\r\n    $scope.search = function()\r\n    {                console.log( $scope.searchKey);\r\n        if( $scope.searchKey.length > 2)\r\n        {\r\n            UserService.search($scope.searchKey).then( function( response )\r\n            {\r\n\r\n                $scope.searchResults = response;\r\n            });\r\n        }else if( $scope.searchKey.length < 1 ){\r\n            $scope.searchResults = [];\r\n        }\r\n    };\r\n\r\n    $scope.selectUser = function( user )\r\n    {\r\n        $scope.searchKey = user.name + ' ' + user.surname;\r\n        $scope.friendId = user.id;\r\n    };\r\n\r\n    $scope.hideSearchResults = function () {\r\n        setTimeout( function () {\r\n            $('#search-results').hide();\r\n        }, 100 );\r\n    }\r\n\r\n    $scope.showSearchResults = function () {\r\n        $('#search-results').show();\r\n    }\r\n\r\n\r\n\r\n    angular.element($('#messages-wrap' )).bind(\"scroll\", function() {\r\n        if( ( $('#messages-container').offset().top + $('#messages-container').height() - 1 ) < $('#messages-wrap').offset().top + $('#messages-wrap').height() && $scope.loading == false ){\r\n                    if($scope.current_page != $scope.last_page){\r\n                        $scope.paginateMessages( $scope.friendId );\r\n                    }\r\n        }\r\n    });\r\n    // $(window).scroll(function() {\r\n    //     if($(window).scrollTop() == $(document).height() - $(window).height() && $scope.loading == false ){\r\n    //         if($scope.current_page != $scope.last_page){\r\n    //             $scope.paginateMessages( $scope.friendId );\r\n    //         }\r\n    //     }\r\n    // });\r\n\r\n    \r\n}]);","messages.service( 'MessageService', ['$http', '$q', function( $http, $q )\r\n    {\r\n        var MessageService = {\r\n\r\n            send: function(message)\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.post( '/api/messages', message )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response.data );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        if ( status == 422 )\r\n                        {\r\n                            deferred.resolve( { errors: response } );\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n            },\r\n            getMessengers:  function()\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/messengers' )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            getMessages: function( id, perPage, current )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/messages/' + id, { params: {per_page: perPage, current: current}} )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        if ( status == 422 )\r\n                        {\r\n                            deferred.resolve( { errors: response } );\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n            },\r\n            markReaded: function( message )\r\n            {\r\n                var deferred = $q.defer();\r\n                var data = {\r\n                    readed: message.readed\r\n                };\r\n                $http.put( '/api/messages/' + message.id, data )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        if ( status == 422 )\r\n                        {\r\n                            deferred.resolve( { errors: response } );\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n            },\r\n            getNewMessages: function( id )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/new-messages/' + id )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        if ( status == 422 )\r\n                        {\r\n                            deferred.resolve( { errors: response } );\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n            },\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            loadMore: function( id, currentPage )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/messages/' + id, { params: { currentPage: currentPage } } )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        if ( status == 422 )\r\n                        {\r\n                            deferred.resolve( { errors: response } );\r\n                        } else\r\n                        {\r\n                            deferred.reject();\r\n                        }\r\n                    } );\r\n\r\n                return deferred.promise;\r\n            }\r\n        };\r\n        return MessageService;\r\n    }] );","user.component( 'friends', {\r\n    templateUrl: '/api/view/modules.users.api.friends',\r\n    controller: 'FriendsController',\r\n    bindings: {\r\n        id: '<',\r\n    }\r\n})","user.component( 'invitation', {\r\n    templateUrl: '/api/view/modules.users.api.invitation',\r\n    controller: 'InvitationController',\r\n    bindings: {\r\n        friendid: '<',\r\n        myid: '<'\r\n    }\r\n})","user.component( 'sendMessage', {\r\n    templateUrl: '/api/view/modules.users.api.send_message',\r\n    controller: 'UserMessageSenderController',\r\n    bindings: {\r\n        userId: '<'\r\n    }\r\n})","/**\r\n * Created by Admin on 16.08.2016..\r\n */\r\napp.component( 'userInfo', {\r\n    templateUrl: '/api/view/modules.users.api.user-info',\r\n    controller: 'UserController',\r\n    // $routeConfig: [\r\n    //     { path: \"/\", component: \"posts\", name: \"posts\", useAsDefault: true }\r\n    // ],\r\n    bindings: {\r\n        id: '<'\r\n    }\r\n})","user.controller( 'EventController', [ 'UserService', '$scope', '$rootScope',\r\n    function ( UserService, $scope, $rootScope ) {\r\n\r\n        $scope.id = null;\r\n        $scope.events = [];\r\n        this.$onInit = function () {\r\n            $scope.id = $rootScope.userId;\r\n\r\n            $scope.getEvents();\r\n        };\r\n\r\n        $scope.getEvents = function () {\r\n            UserService.getEvents( $scope.id ).then( function ( response ) {\r\n                $scope.events = response;\r\n                console.log( response);\r\n            });\r\n        }\r\n\r\n    }]);","user.controller( 'FriendsController', [ 'UserService', '$scope', '$stateParams', '$rootScope',\r\n    function ( UserService, $scope, $stateParams, $rootScope ) {\r\n    $scope.users = [];\r\n\r\n    $scope.id = null;\r\n\r\n    this.$onInit = function () {\r\n        $stateParams.id != null ? $scope.id = $stateParams.id : $scope.id = $rootScope.userId;\r\n        UserService.getFriends( $scope.id ).then( function( response )\r\n        {\r\n            console.log(response);\r\n            $scope.users = response;\r\n        });\r\n    };\r\n\r\n}]);","user.controller( 'InvitationController', [ 'UserService', '$scope', function ( UserService, $scope ) {\r\n\r\n    $scope.myId = null;\r\n    $scope.friendId = null;\r\n    $scope.friendStatus = null;\r\n    $scope.friendStatusText = null;\r\n    $scope.cancelText = null;\r\n\r\n\r\n    this.$onInit = function () {\r\n        $scope.friendId = this.friendid;\r\n        $scope.myId = this.myid;\r\n        $scope.checkStatus();\r\n    };\r\n\r\n    $scope.checkStatus = function () {\r\n        UserService.getStatus($scope.friendId).then( function ( response ) {\r\n            if(response.length == 0) {\r\n                $scope.friendStatus = 0; //nav draugi                       //action - uzaicināt\r\n                $scope.friendStatusText = 'Uzaicināt';\r\n            }else if( response[0].user_id == $scope.myId ){\r\n                if( response[0].friendship == 0 ){\r\n                    $scope.friendStatus = 1; //uzaicinājums nosūtīts        //action - atcelt uzaicinājumu\r\n                    $scope.friendStatusText = 'Atcelt uzaicinājumu';\r\n                }else{\r\n                    $scope.friendStatus = 2; //uzaicinājums apstiprināts    //action - atcelt draudzību\r\n                    $scope.friendStatusText = 'Atcelt draudzību';\r\n                }\r\n            }else /*if( response[0].friend_id == $scope.friendId )*/{\r\n                if( response[0].friendship == 0 ){\r\n                    $scope.friendStatus = 3; //uzaicinājums saņemts         //action - apstiprināt uzaicinājumu\r\n                    $scope.cancelText = 'Atcelt uzaicinājumu';\r\n                    $scope.friendStatusText = 'Apstiprināt uzaicinājumu';\r\n                }else{\r\n                    $scope.friendStatus = 4; //uzaicinājumu apstiprināju    //action - atcelt draudzību\r\n                    $scope.friendStatusText = 'Atcelt draudzību';\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.changeFriendshipStatus = function () {\r\n        UserService.changeStatus( $scope.friendId, $scope.friendStatus ).then( function( response )  {\r\n            $scope.$broadcast('friend-status-changed');\r\n        });\r\n    };\r\n\r\n    $scope.cancelFriendRequest = function () {\r\n        UserService.changeStatus( $scope.friendId, 1 ).then( function( response )  {\r\n            $scope.$broadcast('friend-status-changed');\r\n        });\r\n    };\r\n\r\n\r\n    $scope.$on('friend-status-changed', function(event, args) {\r\n        $scope.checkStatus();\r\n    });\r\n\r\n}]);","user.controller( 'UserController', [ 'UserService', 'MessageService', '$scope', '$rootScope', '$state',\r\n    function ( UserService, MessageService, $scope, $rootScope, $state ) {\r\n\r\n    $scope.user = null;\r\n    \r\n\r\n    $scope.init = function (authId, userId) {\r\n        $rootScope.authId = authId;\r\n        $rootScope.userId = userId;\r\n        $state.go('posts');\r\n\r\n        var details = [ 'id', 'name', 'surname', 'photo' ];\r\n        UserService.getUser( userId, details ).then( function( response )\r\n        {\r\n            $scope.user = response;\r\n        });\r\n    };\r\n    \r\n}]);","user.controller( 'UserEditController', [ 'UserService', '$scope', function ( UserService, $scope ) {\r\n\r\n    $scope.user = null;\r\n    $scope.disabled = true;\r\n\r\n    $scope.init = function (id) {\r\n\r\n        UserService.getUser( id ).then( function( response )\r\n        {\r\n            $scope.user = response;\r\n        });\r\n    };\r\n\r\n    $scope.saveUser = function ( ) {\r\n        UserService.updateUser( $scope.user.id, $scope.user ).then( function( response )\r\n        {\r\n           console.log(response);\r\n        });\r\n    }\r\n\r\n}]);","user.controller( 'UserMessageSenderController', [ 'MessageService', '$scope', function ( MessageService, $scope ) {\r\n\r\n        $scope.userId = null;\r\n\r\n        $scope.disabled = true;\r\n        $scope.message = {\r\n            messageText: \"\",\r\n            receiver: \"\"\r\n        };\r\n\r\n        this.$onInit = function () {\r\n            $scope.userId = this.userId;\r\n        };\r\n\r\n        $scope.sendMessage = function()\r\n        {\r\n            $scope.message.messageText = $scope.messageBody;\r\n            $scope.message.receiver = $scope.userId;console.log( $scope.message );\r\n\r\n            MessageService.send($scope.message).then(function(response){\r\n                $scope.messageBody = \"\";\r\n            });\r\n        };\r\n\r\n        $scope.checkMessageBody = function () {\r\n            $scope.messageBody != '' ? $scope.disabled = false : $scope.disabled = true;\r\n        };\r\n\r\n        // $scope.ngMessage = function () {\r\n        //     ngDialog.open({ template: '/api/view/modules.messages.api.dialog', className: 'ngdialog-theme-default' });\r\n        // };\r\n\r\n    }]);","user.controller( 'VisitorController', [ 'UserService', '$scope', '$stateParams', '$rootScope',\r\n    function ( UserService, $scope, $stateParams, $rootScope ) {\r\n\r\n        $scope.users = [];\r\n        $scope.id = null;\r\n\r\n        this.$onInit = function () {\r\n            $scope.id = $rootScope.authId;\r\n            UserService.getGuests( $scope.id ).then( function( response )\r\n            {\r\n                console.log(response);\r\n                $scope.users = response.data;\r\n            });\r\n        };\r\n\r\n    }]);","user.service( 'UserService', ['$http', '$q', function( $http, $q )\r\n    {\r\n\r\n        var UserService = {\r\n\r\n            getUser:  function( id, details )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/users/' + id,\r\n                    {\r\n                        params: details\r\n                    })\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            updateUser: function ( id, user ) {\r\n                var deferred = $q.defer();\r\n                $http.put( '/api/users/' + id,\r\n                    {\r\n                        params: user\r\n                    })\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n            },\r\n\r\n            onlineUsers:  function( details )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/online',\r\n                    {\r\n                        params: details\r\n                    })\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            getFriends:  function( id )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/friends/' + id )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            changeStatus: function( id, status )\r\n             {\r\n                 var deferred = $q.defer();\r\n                 var data = {\r\n                     id: id,\r\n                     status: status\r\n                 };\r\n                 $http.post( '/api/friends', data )\r\n                     .success( function( response )\r\n                     {\r\n                         deferred.resolve( response );\r\n                     } )\r\n                     .error( function()\r\n                     {\r\n                         deferred.reject();\r\n                     } );\r\n\r\n                 return deferred.promise;\r\n             },\r\n\r\n            getStatus: function( id )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/friend/status/' + id )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            search:  function(string)\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/users/search/' + string )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            invitations: function()\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/friends/invitations' )\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            getGuests:  function( id )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/users/' + id + '/guests')\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n            getEvents:  function( id )\r\n            {\r\n                var deferred = $q.defer();\r\n                $http.get( '/api/users/' + id + '/events')\r\n                    .success( function( response )\r\n                    {\r\n                        deferred.resolve( response );\r\n                    } )\r\n                    .error( function()\r\n                    {\r\n                        deferred.reject();\r\n                    } );\r\n\r\n                return deferred.promise;\r\n\r\n            }\r\n        };\r\n        return UserService;\r\n    }] );"],"sourceRoot":"/source/"}